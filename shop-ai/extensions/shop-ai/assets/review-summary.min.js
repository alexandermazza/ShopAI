const ReviewSummary={async waitForJudgeMeReviews(maxWaitMs=2e4){let reviews=document.querySelectorAll(".jdgm-rev");if(reviews.length>0){return reviews}return new Promise(resolve=>{let found=false;const observer=new MutationObserver(()=>{const reviewsNow=document.querySelectorAll(".jdgm-rev");if(reviewsNow.length>0){found=true;observer.disconnect();resolve(reviewsNow)}});observer.observe(document.body,{childList:true,subtree:true});setTimeout(()=>{if(!found){observer.disconnect();const reviewsNow=document.querySelectorAll(".jdgm-rev");resolve(reviewsNow)}},maxWaitMs)})},async scrapeReviewContent(){let reviewSnippets=[];const judgeMeReviews=await this.waitForJudgeMeReviews();if(judgeMeReviews.length>0){judgeMeReviews.forEach((reviewElement,index)=>{if(index>=10)return;const ratingElement=reviewElement.querySelector(".jdgm-rev__rating");const bodyP=reviewElement.querySelector(".jdgm-rev__body p");const bodyDiv=reviewElement.querySelector(".jdgm-rev__body");let bodyText="";if(bodyP&&bodyP.textContent.trim()){bodyText=bodyP.textContent.trim()}else if(bodyDiv&&bodyDiv.textContent.trim()){bodyText=bodyDiv.textContent.trim()}const rating=ratingElement?ratingElement.getAttribute("data-score")||ratingElement.textContent.trim()||"?":"?";if(bodyText){reviewSnippets.push(`Rating: ${rating}/5 - Comment: "${bodyText}"`)}})}else{let nativeReviews=document.querySelectorAll(".spr-review");if(nativeReviews.length===0){nativeReviews=document.querySelectorAll(".shopify-product-reviews .review")}if(nativeReviews.length>0){nativeReviews.forEach((reviewElement,index)=>{if(index>=10)return;const ratingElement=reviewElement.querySelector(".spr-review-rating, .review-rating");const bodyElement=reviewElement.querySelector(".spr-review-content, .review-content");const rating=ratingElement?ratingElement.textContent.trim().replace(/\s+/g," "):"?";const body=bodyElement?bodyElement.textContent.trim().replace(/\s+/g," "):"";if(body){reviewSnippets.push(`Rating: ${rating}/5 - Comment: "${body}"`)}})}}if(reviewSnippets.length===0){return null}const combinedReviewText=reviewSnippets.join("\n");return combinedReviewText},getStarRatingInfo(){console.log("ReviewSummary: Looking for star ratings...");const productMeta=document.querySelector("[data-judge-me-rating]");if(productMeta){const rating=productMeta.dataset.judgeMeRating;const count=productMeta.dataset.judgeMeCount;if(rating&&count){const stars="★".repeat(Math.floor(parseFloat(rating)))+"☆".repeat(5-Math.floor(parseFloat(rating)));return`${stars} ${rating}/5 based on ${count} customer ${count==="1"?"review":"reviews"}`}}const judgeMeWidget=document.querySelector(".jdgm-widget");if(judgeMeWidget){const avgRating=judgeMeWidget.querySelector(".jdgm-avg-rating");const reviewCount=judgeMeWidget.querySelector(".jdgm-num-reviews");if(avgRating&&reviewCount){const rating=avgRating.textContent.trim();const count=reviewCount.textContent.trim();if(rating&&count){const stars="★".repeat(Math.floor(parseFloat(rating)))+"☆".repeat(5-Math.floor(parseFloat(rating)));return`${stars} ${rating}/5 based on ${count} customer reviews`}}}const shopifyRating=document.querySelector(".shopify-product-reviews-badges .spr-badge");if(shopifyRating){const rating=shopifyRating.dataset.rating||shopifyRating.querySelector(".spr-starrating")?.dataset.rating;const count=shopifyRating.dataset.reviewCount||shopifyRating.querySelector(".spr-review-count")?.textContent;if(rating&&count){const stars="★".repeat(Math.floor(parseFloat(rating)))+"☆".repeat(5-Math.floor(parseFloat(rating)));return`${stars} ${rating}/5 based on ${count} customer reviews`}}const starRating=document.querySelector(".rating, .product-rating, .review-rating");if(starRating){const ratingText=starRating.textContent.trim();const ratingMatch=ratingText.match(/(\d+\.?\d*)\s*\/?\s*5?/);if(ratingMatch){const rating=ratingMatch[1];const stars="★".repeat(Math.floor(parseFloat(rating)))+"☆".repeat(5-Math.floor(parseFloat(rating)));return`${stars} ${rating}/5 customer rating`}}const productElement=document.querySelector("[data-product-rating], [data-rating]");if(productElement){const rating=productElement.dataset.productRating||productElement.dataset.rating;const count=productElement.dataset.reviewCount||productElement.dataset.ratingCount;if(rating){const stars="★".repeat(Math.floor(parseFloat(rating)))+"☆".repeat(5-Math.floor(parseFloat(rating)));const countText=count?` based on ${count} reviews`:"";return`${stars} ${rating}/5${countText}`}}console.log("ReviewSummary: No star rating info found");return null},async trackPageView(){try{let shop=null;if(window.Shopify&&window.Shopify.shop){shop=window.Shopify.shop}else{shop=window.location.hostname}let productId=null;if(window.ShopifyAnalytics&&window.ShopifyAnalytics.meta&&window.ShopifyAnalytics.meta.product){productId=window.ShopifyAnalytics.meta.product.id?.toString()}else if(window.meta&&window.meta.product){productId=window.meta.product.id?.toString()}if(!shop){console.warn("ReviewSummary: Unable to determine shop for page view tracking");return}const response=await fetch("/apps/proxy/api/page-view-tracking",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({shop:shop,productId:productId})});if(response.ok){console.log("ReviewSummary: Page view tracked successfully")}else{console.warn("ReviewSummary: Failed to track page view:",response.status)}}catch(error){console.warn("ReviewSummary: Error tracking page view:",error)}},async onMount(containerElement=document){console.log("ReviewSummary: onMount called for container:",containerElement);if(!containerElement||containerElement.id!=="review-summary-block"){console.error("ReviewSummary: Invalid containerElement passed to onMount:",containerElement);return}console.log("ReviewSummary: Container validated, proceeding with initialization");this.trackPageView();const responseArea=containerElement.querySelector(".summary-response-area");const summaryContentElement=responseArea?.querySelector(".ai-summary-content");const attributionElement=responseArea?.querySelector(".summary-attribution");if(!responseArea||!summaryContentElement||!attributionElement){console.error("ReviewSummary: Missing required elements.");if(!responseArea)console.error(">>> ReviewSummary: responseArea missing");if(!summaryContentElement)console.error(">>> ReviewSummary: summaryContentElement missing");if(!attributionElement)console.error(">>> ReviewSummary: attributionElement missing");containerElement.classList.add("visible");containerElement.classList.add("loaded");if(summaryContentElement){summaryContentElement.textContent="Configuration error. Reach out to info@shop-ai.co to resolve any issues.";if(responseArea)responseArea.classList.add("error")}return}const scrapedReviews=await this.scrapeReviewContent();let toneOfVoice="default";if(containerElement&&containerElement.hasAttribute("data-block-settings")){try{const settings=JSON.parse(containerElement.getAttribute("data-block-settings"));if(settings&&settings.tone_of_voice){toneOfVoice=settings.tone_of_voice}}catch(e){console.warn("ReviewSummary: Failed to parse data-block-settings for tone_of_voice:",e)}}console.log("ReviewSummary: scrapedReviews to send:",scrapedReviews,"toneOfVoice:",toneOfVoice);containerElement.classList.add("visible");summaryContentElement.textContent="";responseArea.classList.remove("error");attributionElement.classList.add("hidden");if(!scrapedReviews){console.log("ReviewSummary: No review text found, checking for star ratings...");const starRatingInfo=this.getStarRatingInfo();if(starRatingInfo){console.log("ReviewSummary: Found star rating info:",starRatingInfo);summaryContentElement.textContent=starRatingInfo;responseArea.classList.remove("loading");responseArea.classList.remove("error");containerElement.classList.add("loaded");attributionElement.classList.remove("hidden");if(window.TextGenerateEffect){TextGenerateEffect.animateText(summaryContentElement,starRatingInfo,{duration:.6,staggerDelay:.08,filter:true})}return}console.log("ReviewSummary: No reviews or ratings found, showing error message.");summaryContentElement.textContent="No reviews detected. Reach out to info@shop-ai.co to resolve any issues.";responseArea.classList.add("error");containerElement.classList.add("loaded");return}console.log(">>> ReviewSummary: Elements Check:",{containerElement:containerElement,summaryContentElement:summaryContentElement,responseArea:responseArea,attributionElement:attributionElement});responseArea.classList.add("loading");const apiUrl="/apps/proxy/resource-review-summary";console.log(">>> ReviewSummary: BEFORE fetch call");try{const response=await fetch(apiUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({scrapedReviews:scrapedReviews,toneOfVoice:toneOfVoice!=="default"?toneOfVoice:undefined})});console.log(">>> ReviewSummary: AFTER fetch call, Status:",response.status);console.log(`>>> ReviewSummary: Response status: ${response.status}, ok: ${response.ok}`);if(!response.ok){console.error(">>> ReviewSummary: Response not OK",response.status,response.statusText);throw new Error(`API Error: ${response.status}`)}console.log(">>> ReviewSummary: Receiving non-streamed JSON response...");summaryContentElement.textContent="";responseArea.classList.remove("loading");containerElement.classList.add("loaded");const contentType=response.headers.get("content-type");console.log(">>> ReviewSummary: Response Content-Type:",contentType);let summaryText="Sorry, could not parse the summary.";console.log(">>> ReviewSummary: BEFORE response.json()");try{const data=await response.json();console.log(">>> ReviewSummary: AFTER response.json(), Data:",data);if(data&&typeof data.summary==="string"){summaryText=data.summary}else{console.error(">>> ReviewSummary: Invalid data structure",data);summaryText="Error: Invalid response format.";responseArea.classList.add("error")}}catch(parseError){console.error(">>> ReviewSummary: Error parsing JSON response:",parseError);try{const rawText=await response.text();console.warn(">>> ReviewSummary: Displaying raw text due to JSON parse error:",rawText);summaryText=rawText}catch(textError){console.error(">>> ReviewSummary: Failed to get raw text after JSON parse error:",textError);summaryText="Error loading summary."}responseArea.classList.add("error")}if(!responseArea.classList.contains("error")){if(window.TextGenerateEffect){TextGenerateEffect.animateText(summaryContentElement,summaryText,{duration:.6,staggerDelay:.1,filter:true})}else{summaryContentElement.textContent=summaryText}attributionElement.classList.remove("hidden")}else{summaryContentElement.textContent=summaryText;attributionElement.classList.add("hidden")}}catch(error){console.error(">>> ReviewSummary: CATCH BLOCK error:",error);summaryContentElement.textContent=`Error: ${error.message||"Could not load summary."}`;responseArea.classList.remove("loading");responseArea.classList.add("error");containerElement.classList.add("loaded");attributionElement.classList.add("hidden")}finally{console.log(">>> ReviewSummary: FINALLY block reached")}}};window.ReviewSummary=ReviewSummary;document.addEventListener("shopify:section:load",function(event){const sectionId=event.detail.sectionId;const sectionElement=document.getElementById(`shopify-section-${sectionId}`);if(!sectionElement){return}const container=sectionElement.querySelector(`#review-summary-block`);if(container&&container.dataset.initialized!=="true"){ReviewSummary.onMount(container);container.dataset.initialized="true"}else if(container){}else{}});document.addEventListener("DOMContentLoaded",()=>{console.log("ReviewSummary: DOMContentLoaded event fired - looking for review blocks.");const blocks=document.querySelectorAll('#review-summary-block:not([data-initialized="true"])');console.log("ReviewSummary: Found blocks:",blocks.length);blocks.forEach(container=>{console.log("ReviewSummary: Initializing component via DOMContentLoaded for block:",container);ReviewSummary.onMount(container);container.dataset.initialized="true"})});